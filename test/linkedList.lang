class Node {

    var value = null;
    var next = null;
    var prev = null;

    fn init(value) {
        this.value = value;
    }
}

class LinkedList {

    var len = 0;
    var head = null;
    var tail = null;

    fn pushFront(value) {
        var node = Node(value);
        node.next = this.head;

        if this.head == null {
            this.head = node;
            this.tail = node;
        } else {
            this.head.prev = node;
            this.head = node;
        }

        this.len = this.len + 1;
    }

    fn pushBack(value) {
        var node = Node(value);
        node.prev = this.tail;

        if this.head == null {
            this.head = node;
            this.tail = node;
        } else {
            this.tail.next = node;
            this.tail = node;
        }

        this.len = this.len + 1;
    }

    fn popFront() {
        var node = this.head;

        this.head = node.next;
        this.head.prev = null;
        this.len = this.len - 1;

        return node.value;
    }

    fn popBack() {
        var node = this.tail;

        this.tail = node.prev;
        this.tail.next = null;
        this.len = this.len - 1;

        return node.value;
    }

    fn get(at) {
        var node = this.head;

        for var i = 1; i <= at; i = i + 1 {
            node = node.next;
        }

        return node.value;
    }

    fn set(at, value) {
        var node = this.head;

        for var i = 1; i <= at; i = i + 1 {
            node = node.next;
        }

        node.value = value;
    }

    fn toString() {
        var str = "[";

        this.forEach(fn (i, value) {
            if i > 0 {
                str = str + ", ";
            }

            str = str + value;
        });

        return str + "]";
    }

    fn forEach(callback) {
        var node = this.head;

        for var i = 0; i < this.len; i = i + 1 {
            callback(i, node.value);

            node = node.next;
        }
    }
}

var ll = LinkedList();

for var i = 0; i < 100000; i = i + 1 {
    ll.pushBack(i);
}

ll.forEach(fn (_, val) {
    print val;
});
